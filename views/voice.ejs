<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Voice Assistant - DEV IDE</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
  
  <style>
    :root {
      --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --error-color: #ef4444;
      --dark-bg: #0f0f23;
      --card-bg: rgba(255, 255, 255, 0.05);
      --glass-bg: rgba(255, 255, 255, 0.1);
      --text-primary: #e2e8f0;
      --text-secondary: #94a3b8;
      --border-color: rgba(255, 255, 255, 0.1);
      --shadow-lg: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      --shadow-glow: 0 0 30px rgba(102, 126, 234, 0.3);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      background: var(--dark-bg);
      color: var(--text-primary);
      min-height: 100vh;
      background-image: 
        radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      padding: 20px;
      padding-top: 80px;
    }

    .back-button {
      position: fixed;
      top: 20px;
      left: 20px;
      padding: 12px 20px;
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: 12px;
      color: var(--text-primary);
      text-decoration: none;
      font-weight: 600;
      backdrop-filter: blur(20px);
      transition: all 0.3s ease;
      z-index: 1000;
    }

    .back-button:hover {
      background: var(--glass-bg);
      transform: translateY(-2px);
      box-shadow: var(--shadow-glow);
    }

    .container {
      max-width: 800px;
      width: 100%;
      text-align: center;
    }

    .header {
      margin-bottom: 40px;
    }

    .header h1 {
      font-size: 3rem;
      font-weight: 700;
      background: var(--secondary-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 15px;
      text-shadow: 0 0 30px rgba(240, 147, 251, 0.5);
    }

    .header p {
      color: var(--text-secondary);
      font-size: 1.2rem;
      font-weight: 500;
    }

    .voice-interface {
      background: var(--card-bg);
      border-radius: 30px;
      padding: 40px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      box-shadow: var(--shadow-lg);
      margin-bottom: 30px;
    }

    .microphone-button {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      background: var(--secondary-gradient);
      border: none;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 3rem;
      color: white;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
      margin: 0 auto 30px;
      box-shadow: 0 0 40px rgba(240, 147, 251, 0.3);
    }

    .microphone-button:hover:not(:disabled) {
      transform: scale(1.05);
      box-shadow: 0 0 60px rgba(240, 147, 251, 0.5);
    }

    .microphone-button.listening {
      animation: pulse 1.5s infinite;
      background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    }

    .microphone-button.processing {
      background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
      animation: spin 2s linear infinite;
    }

    .microphone-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none !important;
    }

    @keyframes pulse {
      0%, 100% { 
        transform: scale(1);
        box-shadow: 0 0 40px rgba(239, 68, 68, 0.4);
      }
      50% { 
        transform: scale(1.1);
        box-shadow: 0 0 80px rgba(239, 68, 68, 0.7);
      }
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .status-text {
      font-size: 1.1rem;
      font-weight: 600;
      margin-bottom: 20px;
      color: var(--text-secondary);
      min-height: 1.5rem;
      transition: all 0.3s ease;
    }

    .status-text.listening {
      color: #ef4444;
      animation: glow 2s ease-in-out infinite alternate;
    }

    .status-text.processing {
      color: var(--warning-color);
    }

    .status-text.success {
      color: var(--success-color);
    }

    .status-text.error {
      color: var(--error-color);
    }

    @keyframes glow {
      from { text-shadow: 0 0 10px rgba(239, 68, 68, 0.5); }
      to { text-shadow: 0 0 20px rgba(239, 68, 68, 0.8); }
    }

    .voice-controls {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-bottom: 30px;
      flex-wrap: wrap;
    }

    .btn {
      padding: 12px 24px;
      border-radius: 12px;
      border: none;
      font-weight: 600;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none !important;
    }

    .btn-secondary {
      background: var(--card-bg);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(20px);
    }

    .btn-secondary:hover:not(:disabled) {
      background: var(--glass-bg);
      transform: translateY(-2px);
    }

    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: var(--shadow-glow);
    }

    .btn-primary:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 10px 40px rgba(102, 126, 234, 0.4);
    }

    .results-section {
      display: grid;
      gap: 20px;
      margin-top: 30px;
    }

    .result-panel {
      background: var(--card-bg);
      border-radius: 20px;
      padding: 25px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      text-align: left;
    }

    .result-header {
      font-size: 1.2rem;
      font-weight: 600;
      margin-bottom: 15px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .voice-input {
      background: rgba(102, 126, 234, 0.1);
      border-radius: 12px;
      padding: 15px;
      font-style: italic;
      color: var(--text-secondary);
      margin-bottom: 15px;
      border-left: 4px solid #667eea;
      word-wrap: break-word;
    }

    .generated-code {
      background: rgba(0, 0, 0, 0.4);
      border-radius: 12px;
      padding: 20px;
      font-family: 'JetBrains Mono', monospace;
      font-size: 14px;
      line-height: 1.5;
      color: var(--text-primary);
      white-space: pre-wrap;
      overflow-x: auto;
      border: 1px solid rgba(255, 255, 255, 0.1);
      word-wrap: break-word;
    }

    .copy-button {
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 6px 12px;
      background: var(--primary-gradient);
      border: none;
      border-radius: 6px;
      color: white;
      font-size: 12px;
      cursor: pointer;
      opacity: 0.8;
      transition: opacity 0.3s ease;
      z-index: 10;
    }

    .copy-button:hover {
      opacity: 1;
    }

    .code-container {
      position: relative;
    }

    .suggestions {
      margin-top: 20px;
      padding: 20px;
      background: rgba(16, 185, 129, 0.1);
      border-radius: 12px;
      border-left: 4px solid var(--success-color);
    }

    .suggestions h4 {
      color: var(--success-color);
      margin-bottom: 10px;
    }

    .suggestions ul {
      list-style: none;
      padding: 0;
    }

    .suggestions li {
      padding: 5px 0;
      color: var(--text-secondary);
      cursor: pointer;
      transition: color 0.3s ease;
    }

    .suggestions li:hover {
      color: var(--text-primary);
    }

    .suggestions li::before {
      content: "üí° ";
      margin-right: 8px;
    }

    .hidden {
      display: none;
    }

    .browser-support {
      background: rgba(239, 68, 68, 0.1);
      border: 1px solid var(--error-color);
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      text-align: center;
    }

    .browser-support h3 {
      color: var(--error-color);
      margin-bottom: 10px;
    }

    .keyboard-shortcuts {
      background: rgba(102, 126, 234, 0.1);
      border: 1px solid #667eea;
      border-radius: 12px;
      padding: 15px;
      margin-top: 20px;
      font-size: 0.9rem;
      color: var(--text-secondary);
    }

    .keyboard-shortcuts strong {
      color: var(--text-primary);
    }

    .language-selector {
      margin-bottom: 20px;
    }

    .language-selector select {
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      color: var(--text-primary);
      padding: 8px 12px;
      font-size: 14px;
      backdrop-filter: blur(20px);
    }

    .language-selector select option {
      background: var(--dark-bg);
      color: var(--text-primary);
    }

    @media (max-width: 768px) {
      body {
        padding-top: 60px;
      }
      
      .header h1 {
        font-size: 2rem;
      }
      
      .voice-interface {
        padding: 20px;
      }
      
      .microphone-button {
        width: 100px;
        height: 100px;
        font-size: 2.5rem;
      }
      
      .voice-controls {
        flex-direction: column;
        align-items: center;
      }
      
      .btn {
        width: 100%;
        max-width: 200px;
      }
    }
  </style>
</head>

<body>
  <a href="/" class="back-button">‚Üê Back to Editor</a>

  <div class="container">
    <div class="header">
      <h1>üéôÔ∏è Voice Assistant</h1>
      <p>Speak your ideas, get instant code generation</p>
    </div>

    <div id="browser-support-warning" class="browser-support hidden">
      <h3>‚ö†Ô∏è Browser Not Supported</h3>
      <p>Speech recognition is not supported in your browser. Please use Chrome, Edge, or Safari for the best experience.</p>
    </div>

    <div class="voice-interface">
      <div class="language-selector">
        <label for="language-select">Programming Language:</label>
        <select id="language-select">
          <option value="javascript">JavaScript</option>
          <option value="python">Python</option>
          <option value="java">Java</option>
          <option value="cpp">C++</option>
          <option value="c">C</option>
          <option value="html">HTML</option>
          <option value="css">CSS</option>
          <option value="php">PHP</option>
          <option value="ruby">Ruby</option>
          <option value="go">Go</option>
          <option value="rust">Rust</option>
          <option value="typescript">TypeScript</option>
        </select>
      </div>

      <button id="microphone-button" class="microphone-button" title="Click to start recording (Spacebar)">
        üé§
      </button>
      
      <div id="status-text" class="status-text">
        Click the microphone to start voice coding
      </div>

      <div class="voice-controls">
        <button id="clear-button" class="btn btn-secondary">Clear Results</button>
        <button id="copy-all-button" class="btn btn-primary hidden">Copy All Code</button>
      </div>

      <div class="keyboard-shortcuts">
        <strong>Keyboard Shortcuts:</strong> Spacebar to start recording, Escape to cancel
      </div>
    </div>

    <div id="results-section" class="results-section hidden">
      <div class="result-panel">
        <div class="result-header">
          üó£Ô∏è Voice Input
        </div>
        <div id="voice-input-display" class="voice-input">
          Your spoken words will appear here...
        </div>
      </div>

      <div class="result-panel">
        <div class="result-header">
          üíª Generated Code
        </div>
        <div class="code-container">
          <pre id="generated-code" class="generated-code">Generated code will appear here...</pre>
          <button id="copy-code-button" class="copy-button" title="Copy code to clipboard">Copy</button>
        </div>
      </div>

      <div class="suggestions">
        <h4>üí° Voice Command Examples:</h4>
        <ul>
          <li onclick="simulateVoiceInput('Create a function to calculate factorial')">Create a function to calculate factorial</li>
          <li onclick="simulateVoiceInput('Write a Python class for a simple calculator')">Write a Python class for a simple calculator</li>
          <li onclick="simulateVoiceInput('Generate a REST API endpoint in JavaScript')">Generate a REST API endpoint in JavaScript</li>
          <li onclick="simulateVoiceInput('Create a bubble sort algorithm in C++')">Create a bubble sort algorithm in C++</li>
          <li onclick="simulateVoiceInput('Build a responsive HTML form with validation')">Build a responsive HTML form with validation</li>
        </ul>
      </div>
    </div>
  </div>

  <script>
    // Global variables
    let recognition = null;
    let isListening = false;
    let isProcessing = false;
    let recognitionTimer = null;
    let silenceTimer = null;

    // DOM elements
    const micButton = document.getElementById('microphone-button');
    const statusText = document.getElementById('status-text');
    const resultsSection = document.getElementById('results-section');
    const voiceInputDisplay = document.getElementById('voice-input-display');
    const generatedCode = document.getElementById('generated-code');
    const copyAllButton = document.getElementById('copy-all-button');
    const browserWarning = document.getElementById('browser-support-warning');
    const clearButton = document.getElementById('clear-button');
    const languageSelect = document.getElementById('language-select');

    // Initialize the application
    document.addEventListener('DOMContentLoaded', function() {
      initializeSpeechRecognition();
      setupEventListeners();
      setupKeyboardShortcuts();
    });

    function initializeSpeechRecognition() {
      // Check for Speech Recognition support
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      
      if (!SpeechRecognition) {
        showBrowserWarning();
        return;
      }

      try {
        recognition = new SpeechRecognition();
        
        // Configure recognition settings
        recognition.continuous = false;
        recognition.interimResults = true;
        recognition.lang = 'en-US';
        recognition.maxAlternatives = 1;

        // Set up event listeners
        recognition.onstart = handleRecognitionStart;
        recognition.onresult = handleRecognitionResult;
        recognition.onerror = handleRecognitionError;
        recognition.onend = handleRecognitionEnd;
        recognition.onspeechstart = handleSpeechStart;
        recognition.onspeechend = handleSpeechEnd;
        recognition.onnomatch = handleNoMatch;

        console.log('Speech recognition initialized successfully');
      } catch (error) {
        console.error('Failed to initialize speech recognition:', error);
        showBrowserWarning();
      }
    }

    function showBrowserWarning() {
      browserWarning.classList.remove('hidden');
      micButton.disabled = true;
      statusText.textContent = 'Speech recognition not supported in this browser';
      statusText.className = 'status-text error';
    }

    function setupEventListeners() {
      // Microphone button
      micButton.addEventListener('click', handleMicrophoneClick);

      // Copy buttons
      document.getElementById('copy-code-button').addEventListener('click', () => {
        copyToClipboard(generatedCode.textContent, 'Code copied to clipboard!');
      });

      copyAllButton.addEventListener('click', () => {
        const allContent = `Voice Input: ${voiceInputDisplay.textContent}\n\nGenerated Code:\n${generatedCode.textContent}`;
        copyToClipboard(allContent, 'All content copied to clipboard!');
      });

      // Clear button
      clearButton.addEventListener('click', clearResults);
    }

    function setupKeyboardShortcuts() {
      document.addEventListener('keydown', (e) => {
        // Prevent shortcuts when user is typing in input fields
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA' || e.target.tagName === 'SELECT') {
          return;
        }

        if (e.code === 'Space' && !isListening && !isProcessing && recognition) {
          e.preventDefault();
          startListening();
        }
        
        if (e.key === 'Escape' && (isListening || isProcessing)) {
          e.preventDefault();
          stopListening();
          resetState();
          statusText.textContent = 'Voice input cancelled';
          statusText.className = 'status-text';
        }
      });
    }

    // Core voice recognition functions
    function handleMicrophoneClick() {
      if (!recognition) {
        showError('Voice recognition not available');
        return;
      }
      
      if (isListening) {
        stopListening();
      } else if (!isProcessing) {
        startListening();
      }
    }

    function startListening() {
      if (!recognition || isListening || isProcessing) return;

      try {
        isListening = true;
        updateUIForListening();
        
        // Set a timeout to stop listening after 15 seconds
        recognitionTimer = setTimeout(() => {
          if (isListening) {
            stopListening();
            showError('Listening timeout - please try again');
          }
        }, 15000);

        recognition.start();
        console.log('Started listening...');
      } catch (error) {
        console.error('Failed to start recognition:', error);
        showError('Could not start listening - please try again');
        resetState();
      }
    }

    function stopListening() {
      if (!recognition || !isListening) return;

      try {
        recognition.stop();
        clearTimeout(recognitionTimer);
        clearTimeout(silenceTimer);
        console.log('Stopped listening...');
      } catch (error) {
        console.error('Failed to stop recognition:', error);
      }
    }

    function updateUIForListening() {
      micButton.classList.add('listening');
      micButton.innerHTML = 'üî¥';
      micButton.title = 'Click to stop recording (Escape)';
      statusText.textContent = 'üé§ Listening... Speak your code idea now';
      statusText.className = 'status-text listening';
    }

    // Recognition event handlers
    function handleRecognitionStart() {
      console.log('Speech recognition started');
    }

    function handleSpeechStart() {
      console.log('Speech detected');
      clearTimeout(silenceTimer);
    }

    function handleSpeechEnd() {
      console.log('Speech ended, waiting for final result...');
      // Give a short time for final results
      silenceTimer = setTimeout(() => {
        if (isListening) {
          stopListening();
        }
      }, 1000);
    }

    function handleRecognitionResult(event) {
      let finalTranscript = '';
      let interimTranscript = '';

      try {
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          const confidence = event.results[i][0].confidence;
          
          console.log(`Result ${i}: "${transcript}" (confidence: ${confidence})`);
          
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else {
            interimTranscript += transcript;
          }
        }

        // Show interim results
        if (interimTranscript.trim()) {
          statusText.textContent = `üé§ "${interimTranscript.trim()}"`;
        }

        // Process final transcript
        if (finalTranscript.trim()) {
          console.log('Final transcript:', finalTranscript.trim());
          processVoiceInput(finalTranscript.trim());
        }
      } catch (error) {
        console.error('Error processing recognition result:', error);
        showError('Error processing voice input');
        resetState();
      }
    }

    function handleRecognitionError(event) {
      console.error('Speech recognition error:', event.error, event);
      clearTimeout(recognitionTimer);
      clearTimeout(silenceTimer);
      
      let errorMessage = 'Could not listen to your voice';
      
      switch (event.error) {
        case 'no-speech':
          errorMessage = 'No speech detected - please speak clearly and try again';
          break;
        case 'audio-capture':
          errorMessage = 'Microphone not available - please check your microphone settings';
          break;
        case 'not-allowed':
          errorMessage = 'Microphone permission denied - please allow microphone access';
          break;
        case 'network':
          errorMessage = 'Network error - please check your internet connection';
          break;
        case 'service-not-allowed':
          errorMessage = 'Speech service not allowed - please try again';
          break;
        case 'aborted':
          errorMessage = 'Speech recognition was cancelled';
          break;
        default:
          errorMessage = 'Could not listen to your voice - please try again';
      }
      
      showError(errorMessage);
      resetState();
    }

    function handleRecognitionEnd() {
      console.log('Speech recognition ended');
      clearTimeout(recognitionTimer);
      clearTimeout(silenceTimer);
      
      if (isListening) {
        isListening = false;
        micButton.classList.remove('listening');
        micButton.innerHTML = 'üé§';
        micButton.title = 'Click to start recording (Spacebar)';
        
        // If no results were processed, show appropriate message
        if (statusText.textContent.includes('Listening')) {
          statusText.textContent = 'No speech detected - please try again';
          statusText.className = 'status-text error';
        }
      }
    }

    function handleNoMatch() {
      console.log('No speech match found');
      showError('Could not understand speech - please speak clearly and try again');
      resetState();
    }

    // Voice input processing - This sends to your backend
    async function processVoiceInput(voiceInput) {
      if (!voiceInput || voiceInput.length < 3) {
        showError('Speech too short - please describe what code you want');
        resetState();
        return;
      }

      console.log('Processing voice input:', voiceInput);
      resetState();
      setProcessingState(true);

      try {
        const selectedLanguage = languageSelect.value;
        const response = await fetch('/generate-code', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: voiceInput,
            language: selectedLanguage
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.success) {
          showResults({
            voice_input: voiceInput,
            code: data.code,
            language: selectedLanguage
          });
          setProcessingState(false);
        } else {
          throw new Error(data.error || 'Failed to generate code');
        }
      } catch (error) {
        console.error('Error generating code:', error);
        showError('Failed to generate code: ' + error.message);
        setProcessingState(false);
      }
    }

    function setProcessingState(processing) {
      isProcessing = processing;
      micButton.classList.toggle('processing', processing);
      micButton.disabled = processing;
      
      if (processing) {
        micButton.innerHTML = '‚öôÔ∏è';
        micButton.title = 'Processing...';
        statusText.textContent = 'üîÑ Processing your voice input and generating code...';
        statusText.className = 'status-text processing';
      } else {
        micButton.disabled = false;
        micButton.title = 'Click to start recording (Spacebar)';
      }
    }

    function resetState() {
      isListening = false;
      isProcessing = false;
      micButton.classList.remove('listening', 'processing');
      micButton.innerHTML = 'üé§';
      micButton.disabled = false;
      micButton.title = 'Click to start recording (Spacebar)';
      clearTimeout(recognitionTimer);
      clearTimeout(silenceTimer);
    }

    // Display results
    function showResults(result) {
      voiceInputDisplay.textContent = result.voice_input;
      generatedCode.textContent = result.code;
      
      resultsSection.classList.remove('hidden');
      copyAllButton.classList.remove('hidden');
      
      statusText.textContent = `‚úÖ Code generated successfully in ${result.language || 'selected language'}!`;
      statusText.className = 'status-text success';
      
      // Smooth scroll to results
      resultsSection.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'start' 
      });
    }

    // Error handling
    function showError(message) {
      statusText.textContent = `‚ùå ${message}`;
      statusText.className = 'status-text error';
    }

    // Utility functions
    function copyToClipboard(text, successMessage) {
      navigator.clipboard.writeText(text).then(() => {
        const originalText = statusText.textContent;
        const originalClass = statusText.className;
        
        statusText.textContent = successMessage;
        statusText.className = 'status-text success';
        
        setTimeout(() => {
          statusText.textContent = originalText;
          statusText.className = originalClass;
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy to clipboard:', err);
        showError('Failed to copy to clipboard');
      });
    }

    function clearResults() {
      resultsSection.classList.add('hidden');
      copyAllButton.classList.add('hidden');
      voiceInputDisplay.textContent = 'Your spoken words will appear here...';
      generatedCode.textContent = 'Generated code will appear here...';
      statusText.textContent = 'Click the microphone to start voice coding';
      statusText.className = 'status-text';
    }

    // Simulate voice input for suggestions
    function simulateVoiceInput(text) {
      processVoiceInput(text);
    }

    // Additional utility functions
    function showSuccess(message) {
      statusText.textContent = `‚úÖ ${message}`;
      statusText.className = 'status-text success';
    }

    function showWarning(message) {
      statusText.textContent = `‚ö†Ô∏è ${message}`;
      statusText.className = 'status-text warning';
    }

    // Auto-detect language from voice input (optional enhancement)
    function detectLanguageFromInput(input) {
      const languageKeywords = {
        'python': ['python', 'django', 'flask', 'numpy', 'pandas', 'def ', 'import '],
        'javascript': ['javascript', 'js', 'node', 'react', 'vue', 'angular', 'function', 'const ', 'let '],
        'java': ['java', 'spring', 'class ', 'public static', 'system.out'],
        'cpp': ['c++', 'cpp', 'iostream', 'using namespace', 'cout', '#include'],
        'html': ['html', 'webpage', 'website', 'form', 'div', 'span', 'button'],
        'css': ['css', 'style', 'stylesheet', 'color', 'background', 'margin', 'padding'],
        'php': ['php', 'laravel', 'wordpress', 'echo', '$_GET', '$_POST'],
        'ruby': ['ruby', 'rails', 'gem', 'def ', 'end'],
        'go': ['golang', 'go lang', 'goroutine', 'package main', 'fmt.'],
        'rust': ['rust', 'cargo', 'fn ', 'mut', 'match'],
        'typescript': ['typescript', 'interface', 'type', 'generic']
      };

      const lowerInput = input.toLowerCase();
      
      for (const [lang, keywords] of Object.entries(languageKeywords)) {
        for (const keyword of keywords) {
          if (lowerInput.includes(keyword)) {
            return lang;
          }
        }
      }
      
      return null;
    }

    // Enhanced voice input processing with language detection
    async function processVoiceInputWithDetection(voiceInput) {
      const detectedLang = detectLanguageFromInput(voiceInput);
      if (detectedLang && detectedLang !== languageSelect.value) {
        languageSelect.value = detectedLang;
        showWarning(`Detected ${detectedLang.toUpperCase()} - language updated automatically`);
        setTimeout(() => {
          processVoiceInput(voiceInput);
        }, 1000);
      } else {
        processVoiceInput(voiceInput);
      }
    }

    // Network error handling
    function handleNetworkError(error) {
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        showError('Network error - please check your internet connection');
      } else if (error.message.includes('500')) {
        showError('Server error - please try again later');
      } else if (error.message.includes('429')) {
        showError('Too many requests - please wait a moment and try again');
      } else {
        showError('Connection failed - please try again');
      }
    }

    // Enhanced error handling for the fetch request
    async function enhancedProcessVoiceInput(voiceInput) {
      if (!voiceInput || voiceInput.length < 3) {
        showError('Speech too short - please describe what code you want');
        resetState();
        return;
      }

      console.log('Processing voice input:', voiceInput);
      resetState();
      setProcessingState(true);

      const maxRetries = 3;
      let retries = 0;

      while (retries < maxRetries) {
        try {
          const selectedLanguage = languageSelect.value;
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

          const response = await fetch('/generate-code', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              prompt: voiceInput,
              language: selectedLanguage
            }),
            signal: controller.signal
          });

          clearTimeout(timeoutId);

          if (!response.ok) {
            if (response.status === 429 && retries < maxRetries - 1) {
              retries++;
              showWarning(`Rate limited - retrying in ${retries * 2} seconds...`);
              await new Promise(resolve => setTimeout(resolve, retries * 2000));
              continue;
            }
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();
          
          if (data.success) {
            showResults({
              voice_input: voiceInput,
              code: data.code,
              language: selectedLanguage,
              explanation: data.explanation
            });
            setProcessingState(false);
            return;
          } else {
            throw new Error(data.error || 'Failed to generate code');
          }
        } catch (error) {
          if (error.name === 'AbortError') {
            showError('Request timed out - please try with a shorter description');
            setProcessingState(false);
            return;
          }
          
          if (retries === maxRetries - 1) {
            console.error('Error generating code:', error);
            handleNetworkError(error);
            setProcessingState(false);
            return;
          }
          
          retries++;
          showWarning(`Error occurred - retrying (${retries}/${maxRetries})...`);
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
    }

    // Replace the original processVoiceInput with the enhanced version
    window.processVoiceInput = enhancedProcessVoiceInput;

    // Add loading animation for better UX
    function addLoadingAnimation() {
      const dots = document.createElement('span');
      dots.className = 'loading-dots';
      dots.innerHTML = '<span>.</span><span>.</span><span>.</span>';
      return dots;
    }

    // Style for loading dots
    const style = document.createElement('style');
    style.textContent = `
      .loading-dots span {
        animation: loading 1.4s infinite ease-in-out both;
      }
      .loading-dots span:nth-child(1) { animation-delay: -0.32s; }
      .loading-dots span:nth-child(2) { animation-delay: -0.16s; }
      @keyframes loading {
        0%, 80%, 100% { opacity: 0; }
        40% { opacity: 1; }
      }
    `;
    document.head.appendChild(style);

    // Initialize with welcome message
    setTimeout(() => {
      if (recognition) {
        statusText.textContent = 'üéôÔ∏è Ready to listen! Click the microphone or press spacebar to start';
      }
    }, 1000);

    // Add visual feedback for successful operations
    function addSuccessAnimation(element) {
      element.style.transform = 'scale(1.05)';
      element.style.transition = 'transform 0.3s ease';
      setTimeout(() => {
        element.style.transform = 'scale(1)';
      }, 300);
    }

    // Enhance the copy functionality with animation
    function enhancedCopyToClipboard(text, successMessage, element) {
      navigator.clipboard.writeText(text).then(() => {
        addSuccessAnimation(element);
        showSuccess(successMessage);
        
        setTimeout(() => {
          statusText.textContent = 'Click the microphone to start voice coding';
          statusText.className = 'status-text';
        }, 3000);
      }).catch(err => {
        console.error('Failed to copy to clipboard:', err);
        showError('Failed to copy to clipboard - please select and copy manually');
      });
    }

    // Update copy button event listeners with enhanced functionality
    document.getElementById('copy-code-button').onclick = () => {
      enhancedCopyToClipboard(
        generatedCode.textContent, 
        'Code copied to clipboard!',
        document.getElementById('copy-code-button')
      );
    };

    copyAllButton.onclick = () => {
      const allContent = `Voice Input: ${voiceInputDisplay.textContent}\n\nGenerated Code:\n${generatedCode.textContent}`;
      enhancedCopyToClipboard(
        allContent, 
        'All content copied to clipboard!',
        copyAllButton
      );
    };
  </script>
</body>
</html>