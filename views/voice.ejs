<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Voice Assistant - DEV IDE</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
  
  <style>
    :root {
      --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --error-color: #ef4444;
      --dark-bg: #0f0f23;
      --card-bg: rgba(255, 255, 255, 0.05);
      --glass-bg: rgba(255, 255, 255, 0.1);
      --text-primary: #e2e8f0;
      --text-secondary: #94a3b8;
      --border-color: rgba(255, 255, 255, 0.1);
      --shadow-lg: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      --shadow-glow: 0 0 30px rgba(102, 126, 234, 0.3);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      background: var(--dark-bg);
      color: var(--text-primary);
      min-height: 100vh;
      background-image: 
        radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .back-button {
      position: fixed;
      top: 20px;
      left: 20px;
      padding: 12px 20px;
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: 12px;
      color: var(--text-primary);
      text-decoration: none;
      font-weight: 600;
      backdrop-filter: blur(20px);
      transition: all 0.3s ease;
      z-index: 100;
    }

    .back-button:hover {
      background: var(--glass-bg);
      transform: translateY(-2px);
      box-shadow: var(--shadow-glow);
    }

    .container {
      max-width: 800px;
      width: 100%;
      text-align: center;
    }

    .header {
      margin-bottom: 40px;
    }

    .header h1 {
      font-size: 3rem;
      font-weight: 700;
      background: var(--secondary-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 15px;
      text-shadow: 0 0 30px rgba(240, 147, 251, 0.5);
    }

    .header p {
      color: var(--text-secondary);
      font-size: 1.2rem;
      font-weight: 500;
    }

    .voice-interface {
      background: var(--card-bg);
      border-radius: 30px;
      padding: 40px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      box-shadow: var(--shadow-lg);
      margin-bottom: 30px;
    }

    .microphone-button {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      background: var(--secondary-gradient);
      border: none;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 3rem;
      color: white;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
      margin: 0 auto 30px;
      box-shadow: 0 0 40px rgba(240, 147, 251, 0.3);
    }

    .microphone-button:hover {
      transform: scale(1.05);
      box-shadow: 0 0 60px rgba(240, 147, 251, 0.5);
    }

    .microphone-button.listening {
      animation: pulse 1.5s infinite;
    }

    .microphone-button.processing {
      background: var(--warning-color);
      animation: spin 2s linear infinite;
    }

    @keyframes pulse {
      0%, 100% { 
        transform: scale(1);
        box-shadow: 0 0 40px rgba(240, 147, 251, 0.3);
      }
      50% { 
        transform: scale(1.1);
        box-shadow: 0 0 80px rgba(240, 147, 251, 0.6);
      }
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .status-text {
      font-size: 1.1rem;
      font-weight: 600;
      margin-bottom: 20px;
      color: var(--text-secondary);
      min-height: 1.5rem;
    }

    .status-text.listening {
      color: var(--secondary-gradient);
      animation: glow 2s ease-in-out infinite alternate;
    }

    .status-text.processing {
      color: var(--warning-color);
    }

    .status-text.success {
      color: var(--success-color);
    }

    .status-text.error {
      color: var(--error-color);
    }

    @keyframes glow {
      from { text-shadow: 0 0 10px rgba(240, 147, 251, 0.5); }
      to { text-shadow: 0 0 20px rgba(240, 147, 251, 0.8); }
    }

    .voice-controls {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-bottom: 30px;
    }

    .btn {
      padding: 12px 24px;
      border-radius: 12px;
      border: none;
      font-weight: 600;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .btn-secondary {
      background: var(--card-bg);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(20px);
    }

    .btn-secondary:hover {
      background: var(--glass-bg);
      transform: translateY(-2px);
    }

    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: var(--shadow-glow);
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 40px rgba(102, 126, 234, 0.4);
    }

    .results-section {
      display: grid;
      gap: 20px;
      margin-top: 30px;
    }

    .result-panel {
      background: var(--card-bg);
      border-radius: 20px;
      padding: 25px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      text-align: left;
    }

    .result-header {
      font-size: 1.2rem;
      font-weight: 600;
      margin-bottom: 15px;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .voice-input {
      background: rgba(102, 126, 234, 0.1);
      border-radius: 12px;
      padding: 15px;
      font-style: italic;
      color: var(--text-secondary);
      margin-bottom: 15px;
      border-left: 4px solid #667eea;
    }

    .generated-code {
      background: rgba(0, 0, 0, 0.4);
      border-radius: 12px;
      padding: 20px;
      font-family: 'JetBrains Mono', monospace;
      font-size: 14px;
      line-height: 1.5;
      color: var(--text-primary);
      white-space: pre-wrap;
      overflow-x: auto;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .copy-button {
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 6px 12px;
      background: var(--primary-gradient);
      border: none;
      border-radius: 6px;
      color: white;
      font-size: 12px;
      cursor: pointer;
      opacity: 0.8;
      transition: opacity 0.3s ease;
    }

    .copy-button:hover {
      opacity: 1;
    }

    .code-container {
      position: relative;
    }

    .suggestions {
      margin-top: 20px;
      padding: 20px;
      background: rgba(16, 185, 129, 0.1);
      border-radius: 12px;
      border-left: 4px solid var(--success-color);
    }

    .suggestions h4 {
      color: var(--success-color);
      margin-bottom: 10px;
    }

    .suggestions ul {
      list-style: none;
      padding: 0;
    }

    .suggestions li {
      padding: 5px 0;
      color: var(--text-secondary);
    }

    .suggestions li::before {
      content: "üí° ";
      margin-right: 8px;
    }

    .hidden {
      display: none;
    }

    @media (max-width: 768px) {
      .header h1 {
        font-size: 2rem;
      }
      
      .voice-interface {
        padding: 20px;
      }
      
      .microphone-button {
        width: 100px;
        height: 100px;
        font-size: 2.5rem;
      }
      
      .voice-controls {
        flex-direction: column;
        align-items: center;
      }
    }
  </style>
</head>

<body>
  <a href="/index" class="back-button">‚Üê Back to Editor</a>

  <div class="container">
    <div class="header">
      <h1>üéôÔ∏è Voice Assistant</h1>
      <p>Speak your ideas, get instant code generation</p>
    </div>

    <div class="voice-interface">
      <button id="microphone-button" class="microphone-button">
        üé§
      </button>
      
      <div id="status-text" class="status-text">
        Click the microphone to start voice coding
      </div>

      <div class="voice-controls">
        <button id="clear-button" class="btn btn-secondary">Clear Results</button>
        <button id="copy-all-button" class="btn btn-primary hidden">Copy All Code</button>
      </div>
    </div>

    <div id="results-section" class="results-section hidden">
      <div class="result-panel">
        <div class="result-header">
          üó£Ô∏è Voice Input
        </div>
        <div id="voice-input-display" class="voice-input">
          Your spoken words will appear here...
        </div>
      </div>

      <div class="result-panel">
        <div class="result-header">
          üíª Generated Code
        </div>
        <div class="code-container">
          <pre id="generated-code" class="generated-code">Generated code will appear here...</pre>
          <button id="copy-code-button" class="copy-button">Copy</button>
        </div>
      </div>

      <div class="suggestions">
        <h4>üí° Voice Command Examples:</h4>
        <ul>
          <li>"Create a function to calculate factorial"</li>
          <li>"Write a Python class for a simple calculator"</li>
          <li>"Generate a REST API endpoint in JavaScript"</li>
          <li>"Create a bubble sort algorithm in C++"</li>
          <li>"Build a responsive HTML form with validation"</li>
        </ul>
      </div>
    </div>
  </div>

  <script>
    let isListening = false;
    let isProcessing = false;

    const micButton = document.getElementById('microphone-button');
    const statusText = document.getElementById('status-text');
    const resultsSection = document.getElementById('results-section');
    const voiceInputDisplay = document.getElementById('voice-input-display');
    const generatedCode = document.getElementById('generated-code');
    const copyAllButton = document.getElementById('copy-all-button');

    // Voice recording functionality
    micButton.addEventListener('click', async () => {
      if (isListening || isProcessing) return;

      try {
        setListeningState(true);
        statusText.textContent = 'üé§ Listening... Speak your code idea now';
        statusText.className = 'status-text listening';

        const response = await fetch('/voice-to-code', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
          throw new Error('Voice service unavailable');
        }

        const result = await response.json();

        setListeningState(false);
        setProcessingState(false);

        if (result.error) {
          showError(result.error);
        } else {
          showResults(result);
        }

      } catch (error) {
        setListeningState(false);
        setProcessingState(false);
        showError(`Connection failed: ${error.message}`);
      }
    });

    function setListeningState(listening) {
      isListening = listening;
      micButton.classList.toggle('listening', listening);
      
      if (listening) {
        micButton.innerHTML = 'üî¥';
        setTimeout(() => {
          if (isListening) {
            setProcessingState(true);
          }
        }, 5000); // Auto-process after 5 seconds
      } else {
        micButton.innerHTML = 'üé§';
      }
    }

    function setProcessingState(processing) {
      isProcessing = processing;
      micButton.classList.toggle('processing', processing);
      
      if (processing) {
        micButton.innerHTML = '‚öôÔ∏è';
        statusText.textContent = 'üîÑ Processing your voice input...';
        statusText.className = 'status-text processing';
      }
    }

    function showResults(result) {
      resultsSection.classList.remove('hidden');
      copyAllButton.classList.remove('hidden');

      // Display voice input
      voiceInputDisplay.textContent = `"${result.voice_input}"`;

      // Display generated code
      generatedCode.textContent = result.code || 'No code generated';

      // Update status
      statusText.textContent = '‚úÖ Code generated successfully!';
      statusText.className = 'status-text success';

      // Scroll to results
      resultsSection.scrollIntoView({ behavior: 'smooth' });
    }

    function showError(error) {
      statusText.textContent = `‚ùå ${error}`;
      statusText.className = 'status-text error';
    }

    // Copy functionality
    document.getElementById('copy-code-button').addEventListener('click', () => {
      copyToClipboard(generatedCode.textContent);
    });

    document.getElementById('copy-all-button').addEventListener('click', () => {
      const allContent = `Voice Input: ${voiceInputDisplay.textContent}\n\nGenerated Code:\n${generatedCode.textContent}`;
      copyToClipboard(allContent);
    });

    function copyToClipboard(text) {
      navigator.clipboard.writeText(text).then(() => {
        showTemporaryMessage('Copied to clipboard!');
      }).catch(() => {
        showTemporaryMessage('Copy failed - please select and copy manually');
      });
    }

    function showTemporaryMessage(message) {
      const originalStatus = statusText.textContent;
      const originalClass = statusText.className;
      
      statusText.textContent = message;
      statusText.className = 'status-text success';
      
      setTimeout(() => {
        statusText.textContent = originalStatus;
        statusText.className = originalClass;
      }, 2000);
    }

    // Clear results
    document.getElementById('clear-button').addEventListener('click', () => {
      resultsSection.classList.add('hidden');
      copyAllButton.classList.add('hidden');
      voiceInputDisplay.textContent = 'Your spoken words will appear here...';
      generatedCode.textContent = 'Generated code will appear here...';
      statusText.textContent = 'Click the microphone to start voice coding';
      statusText.className = 'status-text';
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.code === 'Space' && !isListening && !isProcessing) {
        e.preventDefault();
        micButton.click();
      }
      
      if (e.key === 'Escape' && (isListening || isProcessing)) {
        setListeningState(false);
        setProcessingState(false);
        statusText.textContent = 'Voice input cancelled';
        statusText.className = 'status-text';
      }
    });

    // Add helpful hints
    setTimeout(() => {
      if (!resultsSection.classList.contains('hidden')) return;
      
      statusText.innerHTML = 'Pro tip: Press <strong>Spacebar</strong> to start recording, <strong>Escape</strong> to cancel';
      statusText.className = 'status-text';
    }, 5000);
  </script>
</body>
</html>