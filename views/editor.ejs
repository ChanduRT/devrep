<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>DEV IDE - AI-Powered Development Environment</title>

  <!-- CodeMirror -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/material-darker.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/neat.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/javascript/javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/python/python.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/clike/clike.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

  <!-- Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;700&family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />

  <style>
    :root {
      --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --error-color: #ef4444;
      --dark-bg: #0f0f23;
      --card-bg: rgba(255, 255, 255, 0.05);
      --glass-bg: rgba(255, 255, 255, 0.1);
      --text-primary: #e2e8f0;
      --text-secondary: #94a3b8;
      --border-color: rgba(255, 255, 255, 0.1);
      --shadow-lg: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      --shadow-glow: 0 0 30px rgba(102, 126, 234, 0.3);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      background: var(--dark-bg);
      color: var(--text-primary);
      min-height: 100vh;
      background-image: 
        radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%);
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }

    .header {
      text-align: center;
      margin-bottom: 30px;
      position: relative;
    }

    .header h1 {
      font-size: 3rem;
      font-weight: 700;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 10px;
      text-shadow: 0 0 30px rgba(102, 126, 234, 0.5);
    }

    .header p {
      color: var(--text-secondary);
      font-size: 1.1rem;
      font-weight: 500;
    }

    .controls-grid {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      gap: 20px;
      align-items: center;
      margin-bottom: 30px;
      padding: 20px;
      background: var(--card-bg);
      border-radius: 20px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
    }

    .left-controls, .right-controls {
      display: flex;
      gap: 15px;
      align-items: center;
    }

    .center-controls {
      display: flex;
      gap: 15px;
      justify-content: center;
    }

    .btn {
      padding: 12px 24px;
      border-radius: 12px;
      border: none;
      font-weight: 600;
      font-size: 14px;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    .btn:hover::before {
      left: 100%;
    }

    .btn-primary {
      background: var(--primary-gradient);
      color: white;
      box-shadow: var(--shadow-glow);
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 40px rgba(102, 126, 234, 0.4);
    }

    .btn-success {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
    }

    .btn-warning {
      background: linear-gradient(135deg, #f59e0b, #d97706);
      color: white;
    }

    .btn-error {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white;
    }

    .btn-voice {
      background: var(--secondary-gradient);
      color: white;
      font-size: 16px;
    }

    .select-custom {
      padding: 12px 16px;
      border-radius: 12px;
      border: 1px solid var(--border-color);
      background: var(--card-bg);
      color: var(--text-primary);
      font-weight: 500;
      cursor: pointer;
      backdrop-filter: blur(20px);
      transition: all 0.3s ease;
    }

    .select-custom:hover {
      border-color: rgba(102, 126, 234, 0.5);
      box-shadow: 0 0 20px rgba(102, 126, 234, 0.2);
    }

    .editor-layout {
      display: grid;
      grid-template-columns: 1fr 400px;
      gap: 20px;
      margin-bottom: 20px;
    }

    .editor-panel {
      background: var(--card-bg);
      border-radius: 20px;
      padding: 20px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      box-shadow: var(--shadow-lg);
    }

    .editor-header {
      display: flex;
      justify-content: between;
      align-items: center;
      margin-bottom: 15px;
    }

    .editor-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: var(--text-primary);
    }

    .CodeMirror {
      height: 500px;
      border-radius: 12px;
      font-family: 'JetBrains Mono', monospace;
      font-size: 14px;
      line-height: 1.5;
    }

    .sidebar {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .output-panel {
      background: var(--card-bg);
      border-radius: 20px;
      padding: 20px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      flex: 1;
    }

    .output-content {
      background: rgba(0, 0, 0, 0.4);
      color: var(--text-primary);
      border-radius: 12px;
      padding: 16px;
      font-family: 'JetBrains Mono', monospace;
      font-size: 13px;
      line-height: 1.6;
      max-height: 200px;
      overflow-y: auto;
      white-space: pre-wrap;
      word-wrap: break-word;
    }

    .chat-panel {
      background: var(--card-bg);
      border-radius: 20px;
      padding: 20px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      max-height: 300px;
      display: flex;
      flex-direction: column;
    }

    .chat-messages {
      flex: 1;
      overflow-y: auto;
      margin-bottom: 15px;
      max-height: 200px;
    }

    .chat-input {
      display: flex;
      gap: 10px;
    }

    .chat-input input {
      flex: 1;
      padding: 10px 15px;
      border-radius: 10px;
      border: 1px solid var(--border-color);
      background: var(--card-bg);
      color: var(--text-primary);
      font-size: 14px;
    }

    .chat-message {
      margin-bottom: 10px;
      padding: 8px 12px;
      border-radius: 8px;
      font-size: 13px;
      line-height: 1.4;
    }

    .chat-message.user {
      background: rgba(102, 126, 234, 0.2);
      margin-left: 20px;
    }

    .chat-message.assistant {
      background: rgba(255, 255, 255, 0.05);
      margin-right: 20px;
    }

    .status-bar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 20px;
      background: var(--card-bg);
      border-radius: 15px;
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      margin-top: 20px;
    }

    .status-item {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
      font-weight: 500;
    }

    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: var(--success-color);
      animation: pulse 2s infinite;
    }

    .loading {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: var(--primary-gradient);
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .voice-status {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      background: var(--secondary-gradient);
      color: white;
      border-radius: 12px;
      font-weight: 600;
      transform: translateY(-100px);
      transition: transform 0.3s ease;
      z-index: 1000;
    }

    .voice-status.show {
      transform: translateY(0);
    }

    @media (max-width: 1200px) {
      .editor-layout {
        grid-template-columns: 1fr;
      }
      
      .controls-grid {
        grid-template-columns: 1fr;
        text-align: center;
      }
      
      .left-controls, .right-controls, .center-controls {
        justify-content: center;
        flex-wrap: wrap;
      }
    }
  </style>
</head>

<body>
  <div class="voice-status" id="voice-status">
    üé§ Listening...
  </div>

  <div class="container">
    <div class="header">
      <h1>DEV IDE</h1>
      <p>AI-Powered Development Environment with Voice Assistant</p>
    </div>

    <div class="controls-grid">
      <div class="left-controls">
        <select id="theme-selector" class="select-custom">
          <option value="dark">üåô Dark Mode</option>
          <option value="light">‚òÄÔ∏è Light Mode</option>
        </select>

        <select id="language-selector" class="select-custom">
          <option value="javascript">JavaScript</option>
          <option value="python">Python</option>
          <option value="java">Java</option>
          <option value="cpp">C++</option>
          <option value="c">C</option>
        </select>
      </div>

      <div class="center-controls">
        <button id="voice-button" class="btn btn-voice">üéôÔ∏è Voice Code</button>
      </div>

      <div class="right-controls">
        <button id="run-button" class="btn btn-success">‚ñ∂Ô∏è Run</button>
        <button id="lint-button" class="btn btn-warning">üîç Analyze</button>
        <button id="report-button" class="btn btn-error">üìä Report</button>
      </div>
    </div>

    <div class="editor-layout">
      <div class="editor-panel">
        <div class="editor-header">
          <div class="editor-title">Code Editor</div>
        </div>
        <textarea id="editor">// Welcome to DEV IDE!
// Start coding here or use voice commands to generate code

function hello() {
    console.log("Welcome to DEV IDE!");
    return "Ready to code!";
}

hello();</textarea>
      </div>

      <div class="sidebar">
        <div class="output-panel">
          <div class="editor-header">
            <div class="editor-title">Output</div>
          </div>
          <div id="output-content" class="output-content">Ready to execute your code...</div>
        </div>

        <div class="chat-panel">
          <div class="editor-header">
            <div class="editor-title">AI Assistant</div>
          </div>
          <div id="chat-messages" class="chat-messages">
            <div class="chat-message assistant">
              üëã Hi! I'm your AI coding assistant. Ask me anything about your code!
            </div>
          </div>
          <div class="chat-input">
            <input type="text" id="chat-input" placeholder="Ask about your code..." />
            <button id="chat-send" class="btn btn-primary">Send</button>
          </div>
        </div>
      </div>
    </div>

    <div class="status-bar">
      <div class="status-item">
        <div class="status-dot"></div>
        <span>Server Connected</span>
      </div>
      <div class="status-item">
        <span id="char-count">0 characters</span>
      </div>
      <div class="status-item">
        <span id="line-count">0 lines</span>
      </div>
      <div class="status-item">
        <span id="current-time">--:--</span>
      </div>
    </div>
  </div>

  <script>
    // Initialize CodeMirror
    const editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
      mode: 'javascript',
      lineNumbers: true,
      theme: 'material-darker',
      autoCloseBrackets: true,
      matchBrackets: true,
      indentUnit: 2,
      tabSize: 2,
      lineWrapping: true
    });

    // Global state
    let isProcessing = false;
    const languageModes = {
      javascript: 'javascript',
      python: 'python',
      java: 'text/x-java',
      cpp: 'text/x-c++src',
      c: 'text/x-csrc'
    };

    // Theme switching
    const themeSelector = document.getElementById('theme-selector');
    const langSelector = document.getElementById('language-selector');

    themeSelector.addEventListener('change', (e) => {
      const theme = e.target.value;
      if (theme === 'light') {
        document.body.style.background = '#f8fafc';
        document.body.style.color = '#1e293b';
        editor.setOption('theme', 'neat');
      } else {
        document.body.style.background = '';
        document.body.style.color = '';
        editor.setOption('theme', 'material-darker');
      }
    });

    // Language switching
    langSelector.addEventListener('change', (e) => {
      const language = e.target.value;
      const mode = languageModes[language];
      editor.setOption('mode', mode);
    });

    // Update status bar
    function updateStatus() {
      const content = editor.getValue();
      document.getElementById('char-count').textContent = `${content.length} characters`;
      document.getElementById('line-count').textContent = `${content.split('\n').length} lines`;
      document.getElementById('current-time').textContent = new Date().toLocaleTimeString();
    }

    // API helpers
    async function apiCall(endpoint, data) {
      try {
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        return await response.json();
      } catch (error) {
        return { error: `Network error: ${error.message}` };
      }
    }

    function setButtonLoading(button, loading) {
      if (loading) {
        button.dataset.originalText = button.textContent;
        button.innerHTML = '<div class="loading"></div> Processing...';
        button.disabled = true;
      } else {
        button.textContent = button.dataset.originalText;
        button.disabled = false;
      }
    }

    function showOutput(content, type = 'info') {
      const output = document.getElementById('output-content');
      const timestamp = new Date().toLocaleTimeString();
      output.textContent = `[${timestamp}] ${content}`;
      
      // Add visual feedback based on type
      output.style.borderLeft = type === 'error' ? '4px solid #ef4444' : 
                                type === 'success' ? '4px solid #10b981' : '4px solid #667eea';
    }

    // Chat functionality
    function addChatMessage(message, isUser = false) {
      const chatMessages = document.getElementById('chat-messages');
      const messageDiv = document.createElement('div');
      messageDiv.className = `chat-message ${isUser ? 'user' : 'assistant'}`;
      messageDiv.textContent = message;
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Voice status indicator
    function showVoiceStatus(show = false) {
      const status = document.getElementById('voice-status');
      status.classList.toggle('show', show);
    }

    // Event Listeners
    document.getElementById('run-button').addEventListener('click', async () => {
      const button = document.getElementById('run-button');
      if (isProcessing) return;
      
      isProcessing = true;
      setButtonLoading(button, true);
      showOutput('Executing code...', 'info');

      const code = editor.getValue();
      const language = document.getElementById('language-selector').value;
      
      const result = await apiCall('/execute', { code, language });
      
      if (result.error) {
        showOutput(result.error, 'error');
      } else {
        showOutput(result.output || 'Code executed successfully', 'success');
      }
      
      setButtonLoading(button, false);
      isProcessing = false;
    });

    document.getElementById('lint-button').addEventListener('click', async () => {
      const button = document.getElementById('lint-button');
      if (isProcessing) return;
      
      isProcessing = true;
      setButtonLoading(button, true);
      showOutput('Analyzing code...', 'info');

      const code = editor.getValue();
      const language = document.getElementById('language-selector').value;
      
      const result = await apiCall('/checklint', { code, language });
      
      if (result.error) {
        showOutput(result.error, 'error');
      } else {
        showOutput(result.comments || 'No issues found!', 'info');
      }
      
      setButtonLoading(button, false);
      isProcessing = false;
    });

    document.getElementById('report-button').addEventListener('click', async () => {
      const button = document.getElementById('report-button');
      if (isProcessing) return;
      
      isProcessing = true;
      setButtonLoading(button, true);
      showOutput('Generating detailed report...', 'info');

      const code = editor.getValue();
      const language = document.getElementById('language-selector').value;
      
      // First get analysis
      const analysisResult = await apiCall('/checklint', { code, language });
      const codeSum = analysisResult.comments ? [analysisResult.comments] : [];
      
      // Then generate report
      const result = await apiCall('/crerep', { code, language, code_sum: codeSum });
      
      if (result.error) {
        showOutput(result.error, 'error');
      } else if (result.output) {
        // Generate PDF
        try {
          const { jsPDF } = window.jspdf;
          const doc = new jsPDF();
          
          const pageWidth = doc.internal.pageSize.getWidth();
          const pageHeight = doc.internal.pageSize.getHeight();
          const margin = 15;
          const lineHeight = 6;
          const maxWidth = pageWidth - 2 * margin;
          
          // Split text to fit page width
          const splitText = doc.splitTextToSize(result.output, maxWidth);
          
          let y = margin + 10;
          let pageNumber = 1;
          
          // Add header
          doc.setFont('helvetica', 'bold');
          doc.setFontSize(16);
          doc.text('DEV IDE - Code Analysis Report', pageWidth / 2, margin, { align: 'center' });
          
          doc.setFont('helvetica', 'normal');
          doc.setFontSize(10);
          
          // Add content
          splitText.forEach((line) => {
            if (y + lineHeight > pageHeight - margin - 15) {
              // Add page footer
              doc.setFontSize(8);
              doc.text(`Page ${pageNumber}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
              doc.addPage();
              y = margin + 10;
              pageNumber++;
            }
            doc.text(line, margin, y);
            y += lineHeight;
          });
          
          // Add final page footer
          doc.setFontSize(8);
          doc.text(`Page ${pageNumber}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
          
          doc.save(`dev-ide-report-${new Date().toISOString().split('T')[0]}.pdf`);
          showOutput('Report generated and downloaded successfully!', 'success');
        } catch (pdfError) {
          showOutput(`PDF generation failed: ${pdfError.message}`, 'error');
        }
      }
      
      setButtonLoading(button, false);
      isProcessing = false;
    });

    document.getElementById('voice-button').addEventListener('click', async () => {
      const button = document.getElementById('voice-button');
      if (isProcessing) return;
      
      isProcessing = true;
      setButtonLoading(button, true);
      showVoiceStatus(true);
      showOutput('Listening for voice input...', 'info');

      try {
        const result = await apiCall('/voice-to-code', {});
        
        showVoiceStatus(false);
        
        if (result.error) {
          showOutput(result.error, 'error');
          addChatMessage(`Voice Error: ${result.error}`);
        } else {
          showOutput('Voice input processed successfully!', 'success');
          addChatMessage(`Voice Input: "${result.voice_input}"`);
          
          if (result.code) {
            // Insert generated code into editor
            const cursor = editor.getCursor();
            editor.replaceRange('\n\n// Generated from voice:\n' + result.code, cursor);
            addChatMessage('Code generated and inserted into editor!');
          }
        }
      } catch (error) {
        showVoiceStatus(false);
        showOutput(`Voice processing failed: ${error.message}`, 'error');
      }
      
      setButtonLoading(button, false);
      isProcessing = false;
    });

    // Chat functionality
    document.getElementById('chat-send').addEventListener('click', async () => {
      const input = document.getElementById('chat-input');
      const message = input.value.trim();
      
      if (!message || isProcessing) return;
      
      addChatMessage(message, true);
      input.value = '';
      
      isProcessing = true;
      addChatMessage('Thinking...', false);
      
      const code = editor.getValue();
      const result = await apiCall('/chat', { message, code });
      
      // Remove "thinking" message
      const chatMessages = document.getElementById('chat-messages');
      chatMessages.removeChild(chatMessages.lastChild);
      
      if (result.error) {
        addChatMessage(`Error: ${result.error}`, false);
      } else {
        addChatMessage(result.response, false);
      }
      
      isProcessing = false;
    });

    document.getElementById('chat-input').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        document.getElementById('chat-send').click();
      }
    });

    // Editor change handler
    editor.on('change', () => {
      updateStatus();
    });

    // Initialize
    updateStatus();
    setInterval(updateStatus, 1000);

    // Welcome message
    setTimeout(() => {
      addChatMessage('Welcome to DEV IDE! I can help you with code analysis, debugging, and generation. Try the voice feature to speak your code ideas!', false);
    }, 1000);

    // Check server health
    async function checkServerHealth() {
      try {
        const response = await fetch('/health');
        const health = await response.json();
        
        if (health.status === 'healthy') {
          document.querySelector('.status-dot').style.background = '#10b981';
        } else {
          document.querySelector('.status-dot').style.background = '#ef4444';
        }
      } catch (error) {
        document.querySelector('.status-dot').style.background = '#ef4444';
      }
    }

    // Check health every 30 seconds
    checkServerHealth();
    setInterval(checkServerHealth, 30000);
  </script>
</body>
</html>